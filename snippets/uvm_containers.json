{
    "uvm_object": {
        "prefix": "uvm_object",
        "body": [
            "//  Class: $1",
            "//",
            "class ${1:class_name} extends ${2:base_class};",
            "\t`uvm_object_utils($1);\n",
            "\t//  Group: Variables",
            "\t${3:}\n",
            "\t//  Group: Functions\n",
            "\t//  Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new",
            "\n\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM object class template"
    },
    "uvm_object_with_parameters": {
        "prefix": "uvm_object_with_parameters",
        "body": [
            "//  Class: $1",
            "//",
            "class ${1:class_name} #(${2:parameters}) extends ${3:base_class};",
            "\ttypedef $1 #($2) this_type_t;",
            "\t`uvm_object_param_utils(this_type_t);\n",
            "\t//  Group: Variables",
            "\t${4:}\n",
            "\t//  Group: Functions\n",
            "\t//  Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new",
            "\n\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM parametrized object class template"
    },

    "uvm_component": {
        "prefix": "uvm_component",
        "body": [
            "//  Class: $1",
            "//",
            "class ${1:class_name} extends ${2:base_class};",
            "\t`uvm_component_utils($1);\n",
            "\t//  Group: Config",
            "\t${3:}\n",
            "\t//  Group: Variables",
            "\t${4:}\n",
            "\t//  Group: Functions\n",
            "\t//  Constructor: new",
            "\tfunction new(string name = \"$1\", uvm_component parent);",
            "\t\tsuper.new(name, parent);",
            "\tendfunction: new\n",
            "\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM component class template"
    },
    "uvm_component_with_parameters": {
        "prefix": "uvm_component_with_parameters",
        "body": [
            "//  Class: $1",
            "//",
            "class ${1:class_name} #(${2:parameters}) extends ${3:base_class};",
            "\ttypedef $1 #($2) this_type_t;",
            "\t`uvm_component_param_utils(this_type_t);\n",
            "\t//  Group: Config",
            "\t${4:}\n",
            "\t//  Group: Variables",
            "\t${5:}\n",
            "\t//  Group: Functions\n",
            "\t//  Constructor: new",
            "\tfunction new(string name = \"$1\", uvm_component parent);",
            "\t\tsuper.new(name, parent);",
            "\tendfunction: new\n",
            "\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM parametrized component class template"
    },

    "uvm_component_extended": {
        "prefix": "uvm_component_extended",
        "body": [
            "//  Class: $1",
            "//",
            "class ${1:class_name} extends ${2:base_class};",
            "\t`uvm_component_utils($1);\n",
            "\t//  Group: Config",
            "\t${3:}\n",
            "\t//  Group: Variables",
            "\t${4:}\n",
            "\t//  Group: Functions\n",
            "\t//  Constructor: new",
            "\tfunction new(string name = \"$1\", uvm_component parent);",
            "\t\tsuper.new(name, parent);",
            "\tendfunction: new\n",
            "\t/*---  UVM Build Phases            ---*/",
            "\t/*------------------------------------*/",
            "\t//  Function: build_phase",
            "\textern function void build_phase(uvm_phase phase);",
            "\t//  Function: connect_phase",
            "\textern function void connect_phase(uvm_phase phase);",
            "\t//  Function: end_of_elaboration_phase",
            "\textern function void end_of_elaboration_phase(uvm_phase phase);\n",
            "\t/*---  UVM Run Phases              ---*/",
            "\t/*------------------------------------*/",
            "\t//  Function: start_of_simulation_phase",
            "\textern function void start_of_simulation_phase(uvm_phase phase);",
            "\t//  Function: reset_phase",
            "\textern task reset_phase(uvm_phase phase);",
            "\t//  Function: configure_phase",
            "\textern task configure_phase(uvm_phase phase);",
            "\t//  Function: main_phase",
            "\textern task main_phase(uvm_phase phase);",
            "\t//  Function: shutdown_phase",
            "\textern task shutdown_phase(uvm_phase phase);\n",
            "\t/*---  UVM Cleanup Phases          ---*/",
            "\t/*------------------------------------*/",
            "\t//  Function: extract_phase",
            "\textern function void extract_phase(uvm_phase phase);",
            "\t//  Function: report_phase",
            "\textern function void report_phase(uvm_phase phase);",
            "\t$0",
            "endclass: $1\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  UVM Build Phases                                                          */",
            "/*----------------------------------------------------------------------------*/",
            "function void $1::build_phase(uvm_phase phase);",
            "\t/*  note: Do not call super.build_phase() from any class that is extended from an UVM base class!  */",
            "\t/*  For more information see UVM Cookbook v1800.2 p.503  */",
            "\t// super.build_phase(phase);",
            "endfunction: build_phase\n\n",
            "function void $1::connect_phase(uvm_phase phase);",
            "\tsuper.connect_phase(phase);",
            "endfunction: connect_phase\n\n",
            "function void $1::end_of_elaboration_phase(uvm_phase phase);",
            "\tsuper.end_of_elaboration_phase(phase);",
            "endfunction: end_of_elaboration_phase\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  UVM Run Phases                                                            */",
            "/*----------------------------------------------------------------------------*/",
            "function void $1::start_of_simulation_phase(uvm_phase phase);",
            "\tsuper.start_of_simulation_phase(phase);",
            "endfunction: start_of_simulation_phase\n\n",
            "task $1::reset_phase(uvm_phase phase);",
            "endtask: reset_phase\n\n",
            "task $1::configure_phase(uvm_phase phase);",
            "endtask: configure_phase\n\n",
            "task $1::main_phase(uvm_phase phase);",
            "endtask: main_phase\n\n",
            "task $1::shutdown_phase(uvm_phase phase);",
            "endtask: shutdown_phase\n\n",
            "/*----------------------------------------------------------------------------*/",
            "/*  UVM Cleanup Phases                                                        */",
            "/*----------------------------------------------------------------------------*/",
            "function void $1::report_phase(uvm_phase phase);",
            "\tsuper.report_phase(phase);",
            "endfunction: report_phase\n\n",
            "function void $1::extract_phase(uvm_phase phase);",
            "\tsuper.extract_phase(phase);",
            "endfunction: extract_phase\n\n"
        ],
        "description": "UVM component class extended template"
    },


    "uvm_sequence_item": {
        "prefix": "uvm_sequence_item",
        "body": [
            "//  Class: $1",
            "//",
            "class ${1:class_name} extends ${2:uvm_sequence_item};",
            "\ttypedef $1 this_type_t;",
            "\t`uvm_object_utils($1);\n",
            "\t//  Group: Variables",
            "\t${3:}\n",
            "\t//  Group: Functions\n",
            "\t//  Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new\n",
            "\t//  Function: do_copy",
            "\t// extern function void do_copy(uvm_object rhs);",
            "\t//  Function: do_compare",
            "\t// extern function bit do_compare(uvm_object rhs, uvm_comparer comparer);",
            "\t//  Function: convert2string",
            "\t// extern function string convert2string();",
            "\t//  Function: do_print",
            "\t// extern function void do_print(uvm_printer printer);",
            "\t//  Function: do_record",
            "\t// extern function void do_record(uvm_recorder recorder);",
            "\t//  Function: do_pack",
            "\t// extern function void do_pack();",
            "\t//  Function: do_unpack",
            "\t// extern function void do_unpack();",
            "\n\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM sequence item class template"
    },
    "uvm_sequence_item_with_parameters": {
        "prefix": "uvm_sequence_item_with_parameters",
        "body": [
            "//  Class: $1",
            "//",
            "class ${1:class_name} #(${2:parameters}) extends ${3:uvm_sequence_item};",
            "\ttypedef $1 #($2) this_type_t;",
            "\t`uvm_object_param_utils(this_type_t);\n",
            "\t//  Group: Variables",
            "\t${4:}\n",
            "\t//  Group: Functions\n",
            "\t//  Constructor: new",
            "\tfunction new(string name = \"$1\");",
            "\t\tsuper.new(name);",
            "\tendfunction: new\n",
            "\t//  Function: do_copy",
            "\t// extern function void do_copy(uvm_object rhs);",
            "\t//  Function: do_compare",
            "\t// extern function bit do_compare(uvm_object rhs, uvm_comparer comparer);",
            "\t//  Function: convert2string",
            "\t// extern function string convert2string();",
            "\t//  Function: do_print",
            "\t// extern function void do_print(uvm_printer printer);",
            "\t//  Function: do_record",
            "\t// extern function void do_record(uvm_recorder recorder);",
            "\t//  Function: do_pack",
            "\t// extern function void do_pack();",
            "\t//  Function: do_unpack",
            "\t// extern function void do_unpack();",
            "\n\t$0",
            "endclass: $1\n"
        ],
        "description": "UVM parametrized sequence item class template"
    },

    "uvm_sequence_item_do_copy": {
        "prefix": "uvm_sequence_item_do_copy",
        "body": [
            "function void ${1:class_scope}${2:::}do_copy(uvm_object rhs);",
            "\tthis_type_t rhs_;\n",
            "\tassert (\\$cast(rhs_, rhs)) begin",
            "\t\t${3:}// `uvm_info({this.get_name(), \".do_copy()\"}, \"Cast succeded.\", UVM_HIGH);",
            "\tend else begin",
            "\t\t`uvm_error({this.get_name(), \".do_copy()\"}, \"Cast failed!\");",
            "\t\treturn;",
            "\tend\n",
            "\t/*  chain the copy with parent classes  */",
            "\tsuper.do_copy(rhs);\n",
            "\t/*  list of properties to be copied  */",
            "\t${4:<this.property = rhs_.property>}",
            "endfunction: do_copy\n$0"
        ],
        "description": "UVM sequence item do_copy() stub"
    },
    "uvm_sequence_item_do_compare": {
        "prefix": "uvm_sequence_item_do_compare",
        "body": [
            "function bit ${1:class_scope}${2:::}do_compare(uvm_object rhs, uvm_comparer comparer);",
            "\tthis_type_t rhs_;\n",k
            "\tassert (\\$cast(rhs_, rhs)) begin",
            "\t\t${3:}// `uvm_info({this.get_name(), \".do_compare()\"}, \"Cast succeded.\", UVM_HIGH);",
            "\tend else begin",
            "\t\t`uvm_error({this.get_name(), \".do_compare()\"}, \"Cast failed!\");",
            "\t\treturn 0;",
            "\tend\n",
            "\treturn (",
            "\t\t/*  chain the compare with parent classes  */",
            "\t\t(super.do_compare(rhs, comparer)) &&\n",
            "\t\t/*  list of properties to be compared:  */",
            "\t\t${4:(<this.property == rhs_.property>)}",
            "\t);",
            "endfunction: do_compare\n$0"
        ],
        "description": "UVM sequence item do_compare() stub"
    },
    "uvm_sequence_item_convert2string": {
        "prefix": "uvm_sequence_item_convert2string",
        "body": [
            "function string ${1:class_scope}${2:::}convert2string();",
            "\tstring s;",
            "\t/*  chain the convert2string with parent classes  */",
            "\ts = super.convert2string();\n",
            "\t/*  use \\t (tab) and \\n (newline) to format the data in columns!  */",
            "\t\\$sformat(s, \"${3:property_name}: ${4:<%0d>}\\n\", ${5:<this.property>});",
            "\n",
            "\treturn s;",
            "endfunction: convert2string\n$0"
        ],
        "description": "UVM sequence item convert2string() stub"
    },
    "uvm_sequence_item_do_print": {
        "prefix": "uvm_sequence_item_do_print",
        "body": [
            "function void ${1:class_scope}${2:::}do_print(uvm_printer printer)",
            "\tprinter.m_string = this.convert2string();",
            "endfunction: do_print\n$0"
        ],
        "description": "UVM sequence item do_print() stub"
    },
    "uvm_sequence_item_do_record": {
        "prefix": "uvm_sequence_item_do_record",
        "body": [
            "function void ${1:class_scope}${2:::}do_record(uvm_recorder recorder);",
            "\t/*  chain the record with parent classes  */",
            "\tsuper.do_record(recorder);\n",
            "\t/*  list of properties to be recorded:  */",
            "\t/*  note: use uvm_record_int, uvm_record_string, uvm_record_time, uvm_record_real for known basic types.  */",
            "\t`uvm_record_field(\"${3:property_id}\", ${4:property_name});",
            "endfunction: do_record\n$0"
        ],
        "description": "UVM sequence item do_record() stub"
    },
    "uvm_sequence_item_do_pack": {
        "prefix": "uvm_sequence_item_do_pack",
        "body": [
            "function void ${1:class_scope}${2:::}do_pack(uvm_packer packer);",
            "\t/*  chain the pack with parent classes  */",
            "\tsuper.do_pack(packer);\n",
            "\t/*  list of properties to be packed:  */",
            "\t`${3:uvm_pack_int}(${4:property_name})",
            "endfunction: do_pack\n$0"
        ],
        "description": "Compresses object contents into a bit format."
    },
    "uvm_sequence_item_do_unpack": {
        "prefix": "uvm_sequence_item_do_unpack",
        "body": [
            "function void ${1:class_scope}${2:::}do_unpack(uvm_packer packer);",
            "\t/*  chain the unpack with parent classes  */",
            "\tsuper.do_unpack(packer);\n",
            "\t/*  list of properties to be unpacked:  */",
            "\t`${3:uvm_unpack_int}(${4:property_name})",
            "endfunction: do_unpack\n$0"
        ],
        "description": "Converts a bit format into the data object format."
    }

}
